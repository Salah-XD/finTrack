generator client {
  provider    = "prisma-client-js"
  postInstall = "ts-node prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
}

model User {
  id                  Int                  @id @default(autoincrement())
  name                String
  email               String               @unique
  userName            String               @unique
  password            String
  phone               String
  address             Json?
  gstin               String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  aadhar              String               @unique
  pan                 String               @unique
  accountBalance      Decimal              @default(0.0)
  boxBalance          Decimal              @default(0.0)
  due                 Decimal              @default(0.0)
  agents              Agent[]
  buses               Bus[]
  categories          Category[]
  companyShareDetails CompanyShareDetails?
  operators           Operator[]
  ownerPassword       OwnerPassword?
  transactions        Transaction[]        @relation("UserTransactions")
}

model CompanyShareDetails {
  id                   Int           @id @default(autoincrement())
  userId               Int           @unique
  businessName         String
  businessCategory     String
  businessType         String
  numberOfShareHolders Int
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  shareholders         Shareholder[]
}

model Shareholder {
  id                    Int                 @id @default(autoincrement())
  companyShareDetailsId Int
  name                  String
  sharePercentage       Float
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  shareProfit           Decimal             @default(0.0)
  finance               Decimal             @default(0.0)
  companyShareDetails   CompanyShareDetails @relation(fields: [companyShareDetailsId], references: [id], onDelete: Cascade)
}

model OwnerPassword {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PendingUser {
  id                  Int                  @id @default(autoincrement())
  name                String
  email               String               @unique
  userName            String               @unique
  password            String
  phone               String
  address             Json?
  gstin               String?
  aadhar              String               @unique
  pan                 String               @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  paymentVerification PaymentVerification?
}

model AllRequest {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  userName  String   @unique
  password  String
  phone     String
  address   Json?
  gstin     String?
  aadhar    String   @unique
  pan       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id              Int              @id @default(autoincrement())
  userId          Int
  logType         LogType
  modeOfPayment   PaymentMethod
  transactionNo   String?
  categoryId      Int
  remarks         String?
  payLater        Boolean          @default(false)
  dueAmount       Decimal?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  desc            String?
  amount          Decimal
  paymentType     PaymentType?
  collection      Collection?
  commission      Commission?
  payLaterDetails PayLaterDetails?
  category        Category         @relation(fields: [categoryId], references: [id])
  user            User             @relation("UserTransactions", fields: [userId], references: [id], onDelete: Cascade)
}

model PayLaterDetails {
  id            Int         @id @default(autoincrement())
  transactionId Int         @unique
  from          String
  to            String
  createdAt     DateTime    @default(now())
  travelDate    DateTime
  updatedAt     DateTime    @updatedAt
  busId         Int
  bus           Bus         @relation(fields: [busId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Commission {
  id            Int         @id @default(autoincrement())
  transactionId Int         @unique
  amount        Decimal
  agentId       Int
  agent         Agent       @relation(fields: [agentId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Collection {
  id            Int         @id @default(autoincrement())
  transactionId Int         @unique
  amount        Decimal
  operatorId    Int
  operator      Operator    @relation(fields: [operatorId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model PaymentVerification {
  id               Int           @id @default(autoincrement())
  pendingUserId    Int           @unique
  amount           Decimal
  paymentMethod    PaymentMethod
  upiTransactionId String?
  isVerified       Boolean       @default(false)
  verifiedBy       Int?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  pendingUser      PendingUser   @relation(fields: [pendingUserId], references: [id], onDelete: Cascade)
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String
  createdBy    Int
  user         User          @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Bus {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  userId          Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  payLaterDetails PayLaterDetails[]
}

model Agent {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  userId      Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  commissions Commission[]
}

model Operator {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  userId      Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  collections Collection[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PaymentType {
  FULL
  PARTIAL
}

enum LogType {
  CREDIT
  DEBIT
}

enum PaymentMethod {
  CASH
  UPI
}
