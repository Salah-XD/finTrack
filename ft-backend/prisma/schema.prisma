// This is your Prisma schema file

generator client {
  provider    = "prisma-client-js"
  postInstall = "ts-node prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id             Int            @id @default(autoincrement())
  name           String
  email          String         @unique
  userName       String         @unique
  password       String
  phone          String
  address        Json?
  gstin          String? // Optional
  aadhar         String         @unique
  pan            String         @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  transactions   Transaction[]  @relation("UserTransactions")
  categories     Category[]
  ownerPassword  OwnerPassword?
  buses          Bus[]
  agents         Agent[]
  operators      Operator[]
  boxBalance     Decimal        @default(0.0)
  accountBalance Decimal        @default(0.0)
  due            Decimal        @default(0.0)
  companyShareDetails CompanyShareDetails?
}


model CompanyShareDetails {
  id                Int          @id @default(autoincrement())
  userId            Int           @unique// Reference to the User
  businessName      String
  businessCategory  String       // Enum can be used here, if you have predefined categories
  businessType      String       // Enum for sole proprietorship, partnership, etc.
  numberOfShareHolders Int      // Number of Shareholders
  shareholders      Shareholder[] // List of shareholders (created in a separate model)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Shareholder {
  id                Int          @id @default(autoincrement())
  companyShareDetailsId Int      // Reference to the company details
  name              String
  sharePercentage   Float       // Percentage of shares owned
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  companyShareDetails CompanyShareDetails @relation(fields: [companyShareDetailsId], references: [id], onDelete: Cascade)
}


model OwnerPassword {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  password  String // Hashed password for security
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Relating to User
}

model PendingUser {
  id                  Int                  @id @default(autoincrement())
  name                String
  email               String               @unique
  userName            String               @unique
  password            String
  phone               String
  address             Json?
  gstin               String? // Optional
  aadhar              String               @unique
  pan                 String               @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  paymentVerification PaymentVerification?
}

model AllRequest {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  userName  String   @unique
  password  String
  phone     String
  address   Json?
  gstin     String? // Optional
  aadhar    String   @unique
  pan       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id              Int              @id @default(autoincrement())
  userId          Int
  user            User             @relation("UserTransactions", fields: [userId], references: [id], onDelete: Cascade)
  desc            String?
  logType         LogType
  amount          Decimal // Changed from String to Decimal
  modeOfPayment   PaymentMethod
  transactionNo   String? // Nullable, only required for UPI
  categoryId      Int
  category        Category         @relation(fields: [categoryId], references: [id])
  remarks         String?
  payLater        Boolean          @default(false) // Enables PayLater section if true
  payLaterDetails PayLaterDetails?
  commission      Commission?
  collection      Collection?
  dueAmount       Decimal?
  paymentType     PaymentType?
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

enum PaymentType {
  FULL
  PARTIAL
}

model PayLaterDetails {
  id            Int         @id @default(autoincrement())
  transactionId Int         @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  busId         Int // Foreign Key to Bus
  from          String
  to            String
  travelDate    DateTime
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  bus Bus @relation(fields: [busId], references: [id])
}

model Commission {
  id            Int         @id @default(autoincrement())
  transactionId Int         @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  agentId       Int // Foreign Key to Agent
  amount        Decimal

  agent Agent @relation(fields: [agentId], references: [id])
}

model Collection {
  id            Int         @id @default(autoincrement())
  transactionId Int         @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  operatorId    Int // Foreign Key to Operator
  amount        Decimal

  operator Operator @relation(fields: [operatorId], references: [id])
}

enum LogType {
  CREDIT
  DEBIT
}

enum PaymentMethod {
  CASH
  UPI
}

model PaymentVerification {
  id               Int           @id @default(autoincrement())
  pendingUserId    Int           @unique
  pendingUser      PendingUser   @relation(fields: [pendingUserId], references: [id], onDelete: Cascade)
  amount           Decimal
  paymentMethod    PaymentMethod
  upiTransactionId String?
  isVerified       Boolean       @default(false)
  verifiedBy       Int? // Admin who verified
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String
  createdBy    Int
  user         User          @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Bus {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  userId          Int
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  payLaterDetails PayLaterDetails[]
}

model Agent {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  userId      Int
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  commissions Commission[]
}

model Operator {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  userId      Int
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  collections Collection[]
}
